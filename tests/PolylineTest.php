<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-02-17 at 14:08:49.
 */
class PolylineTest extends PHPUnit_Framework_TestCase
{
	protected $polylineName = "HydeParkRecords";
    protected $encoded = '}`c~FlyquOnAE?`B@|HBpGJ?@pI';
	protected $points = array(
							array(41.79999,-87.58695),
							array(41.79959,-87.58692),
							array(41.79959,-87.58741),
							array(41.79958,-87.58900),
							array(41.79956,-87.59037),
							array(41.79950,-87.59037),
							array(41.79949,-87.59206)
						);

    /**
     * @covers Polyline::Singleton
     * @covers Polyline::__construct
     */
    public function testSingleton()
    {
        $object = Polyline::Singleton();
        $this->assertInstanceOf('Polyline',$object);
        return $object;
    }

	/**
	 * @covers Polyline::polyline
	 * @covers Polyline::Encode
	 * @covers Polyline::Flatten
	 * @depends testSingleton
	 */
	public function testPolyline(Polyline $object) {
		$encoded = $object->polyline($this->polylineName,$this->points);
		$this->assertEquals($encoded,$this->encoded);
		$hash = $object->polyline($this->polylineName);
		$this->assertEquals($encoded,$hash['encoded']);
		return $object;
	}

    /**
     * @covers Polyline::getPolyline
     * @depends testPolyline
     */
    public function testGetPolyline(Polyline $object)
    {
	    $this->assertEquals($this->encoded,$object->getPolyline($this->polylineName,'encoded'));
	    $this->assertNull($object->getPolyline('I_Dont_exsits','encoded'));
	    return $object;
    }

    /**
     * @covers Polyline::__call
	 * @depends testGetPolyline
     */
    public function testGetters(Polyline $object)
    {
		$this->assertEquals($this->encoded,$object->getEncoded($this->polylineName));
		$this->assertEquals($this->encoded,$object->getHydeParkRecordsEncoded());
		return $object;
    }

 	/**
     * @covers Polyline::__call
     * @expectedException BadMethodCallException
	 * @depends testPolyline
     */
    public function testGettersException(Polyline $object)
    {
		$object->thisMethodFails();
		return $object;
    }

    /**
     * @covers Polyline::listPolylines
     * @depends testGetters
     */
    public function testListPolylines(Polyline $object)
    {
        $list = $object->listPolylines();
		$this->assertCount(1,$list);
    }

    /**
     * @covers Polyline::Encode
     * @covers Polyline::Flatten
     */
    public function testEncode()
    {
        // Remove the following lines when you implement this test.
        $this->assertEquals($this->encoded,Polyline::Encode($this->points));
    }


    /**
     * @covers Polyline::Encode
     * @covers Polyline::Flatten
     */
    public function testEncodePrec6()
    {
      $locPoints = array(array(49.283589, -0.253025),
			 array(49.284319, -0.252222),
			 array(49.284598, -0.253122),
			 array(49.284713, -0.253404));

      $strEncode = 'i_`_}A`emNsl@eq@mPfw@eFtP';

      // Remove the following lines when you implement this test.
      $this->assertEquals($strEncode,Polyline::Encode($locPoints, 6));
    }


    /**
     * @covers Polyline::Decode
     */
    public function testDecode()
    {
        $this->assertCount(count($this->points) * 2, Polyline::Decode($this->encoded));
    }


    /**
     * @covers Polyline::Decode
     */
    public function testDecodePrec6()
    {
      $strEncode = "q}~~|AdshNkSyBid@_GqBlm@yKfj@";

      $locPoints = array(
			 49.283049, -0.250691,
			 49.283375, -0.25063,
			 49.283972, -0.250502,
			 49.284029, -0.251245,
			 49.284234, -0.251937
			 );
     $this->assertEquals($locPoints, Polyline::Decode($strEncode, 6));
    }


    /**
     * @covers Polyline::Flatten
     */
    public function testFlatten()
    {
        $paired = array(
        	array(1,2),
			array(3,4),
			array(5,6)
        );
        $this->assertEquals(array(1,2,3,4,5,6),Polyline::Flatten($paired));
    }

    /**
     * @covers Polyline::Pair
     */
    public function testPair()
    {
        $paired = array(
        	array(1,2),
			array(3,4),
			array(5,6)
        );
        $this->assertEquals($paired,Polyline::Pair(array(1,2,3,4,5,6)));
    }
}
